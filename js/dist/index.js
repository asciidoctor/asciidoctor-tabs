/* Generated by Opal 0.11.99.dev */
(function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$use_dsl', '$on_context', '$create_block', '$[]', '$blocks', '$parse_content', '$==', '$size', '$context', '$items?', '$counter', '$document', '$attributes', '$<<', '$create_html_fragment', '$create_list', '$add_role', '$each', '$items', '$create_list_item', '$generate_id', '$text', '$instance_variable_get', '$text=', '$-', '$blocks?', '$text?', '$create_paragraph', '$[]=', '$parent=', '$push', '$private', '$delete']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Asciidoctor');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Tabs');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Block');

        var $nesting = [self].concat($parent_nesting), $Block_process$1, $Block_create_html_fragment$6, $Block_generate_id$7;

        
        self.$use_dsl();
        self.$on_context("example");
        
        Opal.def(self, '$process', $Block_process$1 = function $$process(parent, reader, attrs) {
          var $a, $b, $$2, $$4, $$5, self = this, block = nil, children = nil, source_tabs = nil, nodes = nil, tabset_number = nil, doc = nil, id = nil, tabs = nil, panes = nil;

          
          block = self.$create_block(parent, attrs['$[]']("cloaked-context"), nil, attrs, $hash2(["content_model"], {"content_model": "compound"}));
          children = self.$parse_content(block, reader).$blocks();
          if ($truthy(($truthy($a = (($b = children.$size()['$=='](1)) ? (source_tabs = children['$[]'](0)).$context()['$==']("dlist") : children.$size()['$=='](1))) ? source_tabs['$items?']() : $a))) {
          } else {
            return block
          };
          nodes = [];
          tabset_number = (doc = parent.$document()).$counter("tabset-number");
          id = ($truthy($a = attrs['$[]']("id")) ? $a : "" + (($truthy($b = doc.$attributes()['$[]']("idprefix")) ? $b : "_")) + "tabset" + (tabset_number));
          nodes['$<<'](self.$create_html_fragment(parent, "" + "<div id=\"" + (id) + "\" class=\"tabset is-loading\">"));
          tabs = self.$create_list(parent, "ulist");
          tabs.$add_role("tabs");
          panes = $hash2([], {});
          $send(source_tabs.$items(), 'each', [], ($$2 = function($mlhs_tmp1, details){var self = $$2.$$s || this, $c, $d, $$3, title = nil, tab = nil, tab_id = nil, $writer = nil, blocks = nil, block0 = nil;

          
            
            if ($mlhs_tmp1 == null) {
              $mlhs_tmp1 = nil;
            };
            
            if (details == null) {
              details = nil;
            };
            $d = $mlhs_tmp1, $c = Opal.to_ary($d), (title = ($c[0] == null ? nil : $c[0])), $d;
            tab = self.$create_list_item(tabs);
            tabs['$<<'](tab);
            tab_id = self.$generate_id(title.$text(), id, doc);
            
            $writer = ["" + "[[" + (tab_id) + "]]" + (title.$instance_variable_get("@text"))];
            $send(tab, 'text=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            if ($truthy(details['$blocks?']())) {
              blocks = details.$blocks()
            } else if ($truthy(details['$text?']())) {
              blocks = [self.$create_paragraph(parent, details.$instance_variable_get("@text"), $hash2([], {}))]
            } else {
              return nil;
            };
            if ($truthy(($truthy($c = (($d = (block0 = blocks['$[]'](0)).$context()['$==']("open")) ? blocks.$size()['$=='](1) : (block0 = blocks['$[]'](0)).$context()['$==']("open"))) ? block0['$blocks?']() : $c))) {
              blocks = block0.$blocks()};
            return $send((($writer = [tab_id, blocks]), $send(panes, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]), 'each', [], ($$3 = function(it){var self = $$3.$$s || this;

            
              
              if (it == null) {
                it = nil;
              };
              $writer = [parent];
              $send(it, 'parent=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, $$3.$$s = self, $$3.$$arity = 1, $$3));}, $$2.$$s = self, $$2.$$arity = 2, $$2.$$has_top_level_mlhs_arg = true, $$2));
          nodes['$<<'](tabs);
          nodes['$<<'](self.$create_html_fragment(parent, "<div class=\"content\">"));
          $send(panes, 'each', [], ($$4 = function(tab_id, blocks){var self = $$4.$$s || this;

          
            
            if (tab_id == null) {
              tab_id = nil;
            };
            
            if (blocks == null) {
              blocks = nil;
            };
            nodes['$<<'](self.$create_html_fragment(parent, "" + "<div class=\"tab-pane\" aria-labelledby=\"" + (tab_id) + "\">"));
            $send(nodes, 'push', Opal.to_a(blocks));
            return nodes['$<<'](self.$create_html_fragment(parent, "</div>"));}, $$4.$$s = self, $$4.$$arity = 2, $$4));
          nodes['$<<'](self.$create_html_fragment(parent, "</div>"));
          nodes['$<<'](self.$create_html_fragment(parent, "</div>"));
          $send(nodes, 'each', [], ($$5 = function(it){var self = $$5.$$s || this;

          
            
            if (it == null) {
              it = nil;
            };
            return parent.$blocks()['$<<'](it);}, $$5.$$s = self, $$5.$$arity = 1, $$5));
          return nil;
        }, $Block_process$1.$$arity = 3);
        self.$private();
        
        Opal.def(self, '$create_html_fragment', $Block_create_html_fragment$6 = function $$create_html_fragment(parent, html) {
          var self = this;

          return self.$create_block(parent, "pass", html, nil)
        }, $Block_create_html_fragment$6.$$arity = 2);
        return (Opal.def(self, '$generate_id', $Block_generate_id$7 = function $$generate_id(str, base_id, doc) {
          var $a, self = this, restore_idprefix = nil, attrs = nil, $writer = nil;

          return (function() { try {
          
          restore_idprefix = (attrs = doc.$attributes())['$[]']("idprefix");
          
          $writer = ["idprefix", "" + (base_id) + (($truthy($a = attrs['$[]']("idseparator")) ? $a : "_"))];
          $send(attrs, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          return $$$($$$('::', 'Asciidoctor'), 'Section').$generate_id(str, doc);
          } finally {
            (function() {if ($truthy(restore_idprefix)) {
              
              
              $writer = ["idprefix", restore_idprefix];
              $send(attrs, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];;
            } else {
              
              return attrs.$delete("idprefix");
            }; return nil; })()
          }; })()
        }, $Block_generate_id$7.$$arity = 3), nil) && 'generate_id';
      })($nesting[0], $$$($$$($$$('::', 'Asciidoctor'), 'Extensions'), 'BlockProcessor'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
})(Opal);

/* Generated by Opal 0.11.99.dev */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$==', '$absolute_path', '$use_dsl', '$at_location', '$join', '$chomp', '$read']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Asciidoctor');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Tabs');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var self = $module($base, 'Docinfo');

        var $nesting = [self].concat($parent_nesting);

        
        if ($$($nesting, 'RUBY_ENGINE')['$==']("opal")) {
          
          Opal.const_set($nesting[0], 'DATA_DIR', $$$('::', 'File').$absolute_path("../data", __dirname));
          Opal.const_set($nesting[0], 'FILE_READ_MODE', "r");
        } else {
          nil
        };
        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Styles');

          var $nesting = [self].concat($parent_nesting), $Styles_process$1;

          
          self.$use_dsl();
          self.$at_location("head");
          Opal.const_set($nesting[0], 'STYLESHEET_FILE', $$$('::', 'File').$join($$($nesting, 'DATA_DIR'), "css/tabs.css"));
          return (Opal.def(self, '$process', $Styles_process$1 = function $$process(_doc) {
            var self = this;

            return "" + "<style>\n" + ($$$('::', 'File').$read($$($nesting, 'STYLESHEET_FILE'), $hash2(["mode"], {"mode": $$($nesting, 'FILE_READ_MODE')})).$chomp()) + "\n</style>"
          }, $Styles_process$1.$$arity = 1), nil) && 'process';
        })($nesting[0], $$$($$$($$$('::', 'Asciidoctor'), 'Extensions'), 'DocinfoProcessor'), $nesting);
        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Behavior');

          var $nesting = [self].concat($parent_nesting), $Behavior_process$2;

          
          self.$use_dsl();
          self.$at_location("footer");
          Opal.const_set($nesting[0], 'JAVASCRIPT_FILE', $$$('::', 'File').$join($$($nesting, 'DATA_DIR'), "js/tabs.js"));
          return (Opal.def(self, '$process', $Behavior_process$2 = function $$process(_doc) {
            var self = this;

            return "" + "<script>\n" + ($$$('::', 'File').$read($$($nesting, 'JAVASCRIPT_FILE'), $hash2(["mode"], {"mode": $$($nesting, 'FILE_READ_MODE')})).$chomp()) + "\n</script>"
          }, $Behavior_process$2.$$arity = 1), nil) && 'process';
        })($nesting[0], $$$($$$($$$('::', 'Asciidoctor'), 'Extensions'), 'DocinfoProcessor'), $nesting);
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
})(Opal);

/* Generated by Opal 0.11.99.dev */
(function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$==', '$module_function', '$proc', '$block', '$embedded?', '$docinfo_processor', '$groups', '$[]', '$key', '$group', '$[]=', '$-', '$delete']);
  
  if ($$($nesting, 'RUBY_ENGINE')['$==']("opal")) {
  } else {
    nil
  };
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Asciidoctor');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Tabs');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var self = $module($base, 'Extensions');

        var $nesting = [self].concat($parent_nesting), $Extensions_group$1, $Extensions_key$3, $Extensions_register$4, $Extensions_unregister$5;

        
        self.$module_function();
        
        Opal.def(self, '$group', $Extensions_group$1 = function $$group() {
          var $$2, self = this;

          return $send(self, 'proc', [], ($$2 = function(){var self = $$2.$$s || this;
            if (self.document == null) self.document = nil;

          
            self.$block($$($nesting, 'Block'), "tabs");
            if ($truthy(self.document['$embedded?']())) {
              return nil;};
            self.$docinfo_processor($$$($$($nesting, 'Docinfo'), 'Styles'));
            self.$docinfo_processor($$$($$($nesting, 'Docinfo'), 'Behavior'));
            return nil;}, $$2.$$s = self, $$2.$$arity = 0, $$2))
        }, $Extensions_group$1.$$arity = 0);
        
        Opal.def(self, '$key', $Extensions_key$3 = function $$key() {
          var self = this;

          return "tabs"
        }, $Extensions_key$3.$$arity = 0);
        
        Opal.def(self, '$register', $Extensions_register$4 = function $$register(registry) {
          var $a, self = this, $logical_op_recvr_tmp_1 = nil, $writer = nil;

          
          
          if (registry == null) {
            registry = nil;
          };
          $logical_op_recvr_tmp_1 = ($truthy($a = registry) ? $a : $$$($$$('::', 'Asciidoctor'), 'Extensions')).$groups();
          return ($truthy($a = $logical_op_recvr_tmp_1['$[]'](self.$key())) ? $a : (($writer = [self.$key(), self.$group()]), $send($logical_op_recvr_tmp_1, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
        }, $Extensions_register$4.$$arity = -1);
        
        Opal.def(self, '$unregister', $Extensions_unregister$5 = function $$unregister(registry) {
          var $a, self = this;

          
          
          if (registry == null) {
            registry = nil;
          };
          ($truthy($a = registry) ? $a : $$$($$$('::', 'Asciidoctor'), 'Extensions')).$groups().$delete(self.$key());
          return nil;
        }, $Extensions_unregister$5.$$arity = -1);
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
})(Opal);
